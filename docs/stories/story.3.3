# Story 3.3: Smart Bet AI Feature

## Status: Draft

## Story

-   **As a user,** I want a "Smart Bet" button that gives me a simple, AI-powered bet suggestion.
-   **So that** I can have a more engaging and confidence-inspiring betting experience.

## Acceptance Criteria

1.  A "Smart Bet" button is visible in the UI for applicable Gamba games.
2.  Clicking the button calls the `/api/smart-bet` endpoint.
3.  The API endpoint successfully fetches the user's `riskTolerance` from the `user_preferences` table in D1.
4.  The endpoint passes the user's risk profile and recent game history to the `aiAdapter`.
5.  The `aiAdapter` returns a simple, actionable suggestion (e.g., "Bet High", "Bet Low", "Small Wager").
6.  The suggestion is displayed to the user in the UI.

## Tasks / Subtasks

-   [ ] **Task 1 (AC: #1, #2):** Implement the frontend "Smart Bet" button in the relevant Gamba game UI components. The button's `onClick` handler should make a `fetch` call to `/api/smart-bet`.
-   [ ] **Task 2 (AC: #3, #4):** Implement the backend API endpoint at `src/pages/api/smart-bet.ts`.
    -   [ ] **Subtask 2.1:** The endpoint must authenticate the user via their Particle Network JWT.
    -   [ ] **Subtask 2.2:** It must query the D1 `user_preferences` table to retrieve the `riskTolerance` for the authenticated `user_id`.
    -   [ ] **Subtask 2.3:** It must fetch the user's recent game history (this may require a new table or query, TBD).
    -   [ ] **Subtask 2.4:** It must call the `aiAdapter.generate()` function with a prompt that includes the user's risk profile and game history, asking for a simple bet suggestion.
-   [ ] **Task 3 (AC: #5, #6):** Implement the UI logic to receive the suggestion from the API and display it to the user (e.g., using a `sonner` toast notification or a text element near the bet controls).

## Dev Notes

### Technical Guidance from `docs/architecture.md`

*   **API-Driven Logic:** The frontend's role is simply to call the API and display the result. All complex logic (database queries, AI interaction) resides exclusively in the backend API route.
*   **AI Adapter:** All communication with the LLM must go through the `aiAdapter`. The prompt should be carefully engineered to return a simple, structured response that can be easily parsed (e.g., JSON with a `suggestion` key).
*   **User Data:** The quality of the suggestion depends on the data provided. The API must fetch the user's `riskTolerance` from D1. For the MVP, if recent game history is not yet logged, the prompt can be based on risk tolerance alone.

### Testing

*   **Integration Test:** Create `tests/integration/smart-bet.test.ts`.
    *   Write a test for the `/api/smart-bet` endpoint.
    *   Mock the D1 database to return a sample user profile with a specific `riskTolerance`.
    *   Mock the `aiAdapter` to return a predictable suggestion.
    *   Call the endpoint with a mock user token and assert that the response body contains the mocked suggestion.
*   **Manual Test Steps:**
    1.  Log in as a user.
    2.  (If needed) Use a database tool to set a `riskTolerance` for your test user in the D1 `user_preferences` table.
    3.  Navigate to a game with the "Smart Bet" button.
    4.  Click the button.
    5.  Verify that a toast notification or UI element appears with a bet suggestion.

## Dev Agent Record

### Agent Model Used:

### Completion Notes List

### Change Log

| Date       | Version | Description | Author |
| :---       | :---    | :---------- | :----- |
