rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Tournaments collection
    match /tournaments/{tournamentId} {
      allow read: if true; // Anyone can read tournament data
      allow create: if request.auth != null && request.auth.token.admin == true; // Only admins can create tournaments
      allow update: if request.auth != null && request.auth.token.admin == true; // Only admins can update tournament details
      allow delete: if request.auth != null && request.auth.token.admin == true; // Only admins can delete tournaments

      // Matches subcollection
      match /matches/{matchId} {
        allow read: if true; // Anyone can read match data
        // Only authenticated users can update scores, and only if they are part of the teams involved or an admin
        allow update: if request.auth != null && (
          request.auth.token.admin == true ||
          (resource.data.team1 == request.auth.uid || resource.data.data.team2 == request.auth.uid)
        ) && (
          request.resource.data.score1 is number && request.resource.data.score2 is number
        );
        allow create: if request.auth != null && request.auth.token.admin == true; // Only admins can create matches
        allow delete: if request.auth != null && request.auth.token.admin == true; // Only admins can delete matches
      }

      // Teams subcollection (if teams are stored as subcollections)
      match /teams/{teamId} {
        allow read: if true; // Anyone can read team data
        allow create: if request.auth != null; // Any authenticated user can create a team
        allow update: if request.auth != null && (request.auth.uid in resource.data.players || request.auth.token.admin == true); // Only team members or admin can update team
        allow delete: if request.auth != null && (request.auth.uid in resource.data.players || request.auth.token.admin == true); // Only team members or admin can delete team
      }
    }

    // Users collection (conceptual, for user profiles and roles)
    match /users/{userId} {
      allow read: if true; // Anyone can read user profiles (e.g., for leaderboards)
      allow create: if request.auth != null && request.auth.uid == userId; // Users can create their own profile
      allow update: if request.auth != null && request.auth.uid == userId; // Users can update their own profile
      allow delete: if request.auth != null && request.auth.uid == userId; // Users can delete their own profile
    }
  }
}